import requests

# === CONFIGURATION ===
AUTH_URL = "https://<keystone-host>:5000/v3"
USERNAME = "admin"
PASSWORD = "your_admin_password"
USER_DOMAIN = "Default"
PROJECT_NAME = "admin"
PROJECT_DOMAIN = "Default"


def get_token(scope="system"):
    """Authenticate and return scoped token and service catalog."""
    if scope == "system":
        scope_block = {"system": {"all": True}}
    elif scope == "project":
        scope_block = {
            "project": {
                "name": PROJECT_NAME,
                "domain": {"name": PROJECT_DOMAIN}
            }
        }
    else:
        raise ValueError("Invalid scope type")

    payload = {
        "auth": {
            "identity": {
                "methods": ["password"],
                "password": {
                    "user": {
                        "name": USERNAME,
                        "domain": {"name": USER_DOMAIN},
                        "password": PASSWORD
                    }
                }
            },
            "scope": scope_block
        }
    }

    headers = {"Content-Type": "application/json"}
    resp = requests.post(f"{AUTH_URL}/auth/tokens", json=payload, headers=headers)
    if resp.status_code != 201:
        raise Exception(f"Auth failed: {resp.status_code} {resp.text}")

    return resp.headers["X-Subject-Token"], resp.json()["token"]["catalog"]


def get_endpoint(catalog, service_type, interface="public"):
    for svc in catalog:
        if svc["type"] == service_type:
            for ep in svc["endpoints"]:
                if ep["interface"] == interface:
                    return ep["url"]
    raise Exception(f"{service_type} endpoint not found")


# === 1. SYSTEM-SCOPED TOKEN → hypervisors ===
sys_token, sys_catalog = get_token(scope="system")
nova_url = get_endpoint(sys_catalog, "compute")
hypervisors_url = f"{nova_url}/os-hypervisors/detail"

res = requests.get(hypervisors_url, headers={"X-Auth-Token": sys_token})
print("\n--- Hypervisors ---")
for h in res.json().get("hypervisors", []):
    print(f"{h['hypervisor_hostname']} - {h['state']} - {h['status']}")


# === 2. PROJECT-SCOPED TOKEN → servers ===
proj_token, proj_catalog = get_token(scope="project")
nova_url = get_endpoint(proj_catalog, "compute")
servers_url = f"{nova_url}/servers/detail"

res = requests.get(servers_url, headers={"X-Auth-Token": proj_token})
print("\n--- Servers ---")
for s in res.json().get("servers", []):
    print(f"{s['name']} - {s['status']} - {s['OS-EXT-SRV-ATTR:host']}")
